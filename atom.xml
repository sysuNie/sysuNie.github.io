<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>sysuNie</title>
  
  <subtitle>Gotta to change</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-12-16T05:27:20.146Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>JiKang Nie</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Forward Neural Network</title>
    <link href="http://yoursite.com/2017/12/16/Forward%20Neural%20Network/"/>
    <id>http://yoursite.com/2017/12/16/Forward Neural Network/</id>
    <published>2017-12-16T05:27:20.146Z</published>
    <updated>2017-12-16T05:27:20.146Z</updated>
    
    <content type="html"><![CDATA[<h2 id="深度学习应用于自然语言处理-前向神经网络"><a href="#深度学习应用于自然语言处理-前向神经网络" class="headerlink" title="深度学习应用于自然语言处理-前向神经网络"></a>深度学习应用于自然语言处理-前向神经网络</h2><p>[TOC]</p><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>深度学习的浪潮袭来，现已在各个领域中应用。深度学习的表现令人叹为观止，不得不说我们迎来了依靠深度学习的人工智能学习时代。</p><blockquote><p>　人工智能，让世界更美好。</p></blockquote><p>这一章主要是通过学习 <a href="http://cs224d.stanford.edu/" target="_blank" rel="external">Stanford cs224d</a> 课程已经阅读一些有些的博客所作出的总结。</p><h2 id="本章介绍"><a href="#本章介绍" class="headerlink" title="本章介绍"></a>本章介绍</h2><p>从数学的角度对前向神经网络数学模型进行介绍、推导和证明。</p><h2 id="前提知识"><a href="#前提知识" class="headerlink" title="前提知识"></a>前提知识</h2><p><a href="http://cs229.stanford.edu/section/cs229-linalg.pdf" target="_blank" rel="external">线性代数(Linear Algebra)</a><br><a href="http://cs229.stanford.edu/section/cs229-prob.pdf" target="_blank" rel="external">概率论(Probability Theory)</a><br><a href="http://cs229.stanford.edu/section/cs229-cvxopt.pdf" target="_blank" rel="external">凸优化(Convex Optimization)</a></p><h2 id="前向神经网络"><a href="#前向神经网络" class="headerlink" title="前向神经网络"></a>前向神经网络</h2><p>所谓神经网络就是将许多个单一“神经元”联结在一起，这样，一个“神经元”的输出就可以是另一个“神经元”的输入。以下是一个简单的<strong>三层前向全连接神经网络：</strong></p><p><img src="http://oddpnmpll.bkt.clouddn.com/2016-10-18-14%3A47%3A20.jpg" alt="neural networks"></p><p>图中<strong>x</strong>为输入层，<strong>h</strong>为隐藏层，$\hat{y}$为输出层。在全连接网络中，上一层和下一层的每个神经元都相连。隐藏层在接收到输入x后会进行一个非线性变化，再将输出信号传递给下一层。非线性变换由激活函数(activation function)实现。在数学上，我们可以用矩阵乘法（Matrix multiplication）来解释:<br>$$<br>\begin{align<em>}<br>\boldsymbol{h} &amp;= \text{sigmoid}(\boldsymbol{xW}_1+\boldsymbol{b}_1)\\<br>\boldsymbol{\hat{y}} &amp;= \text{softmax}(\boldsymbol{hW}_2+\boldsymbol{b}_2)\\<br>\end{align</em>}<br>$$</p><p>式中<strong>sigmoid</strong>和<strong>softmax</strong>都是一个激活函数,<strong>W</strong>是指两层之间的权重，<strong>b</strong>是偏置量。我们可以看到<strong>x</strong>进行了线性变换后，再做非线性变换，<strong>x</strong>输出的信号将作为<strong>b</strong>的输入。</p><a id="more"></a><h3 id="激活函数-Activation-fuction"><a href="#激活函数-Activation-fuction" class="headerlink" title="激活函数(Activation fuction)"></a>激活函数(Activation fuction)</h3><p>激活函数的作用是能够给神经网络加入一些非线性因素，使得神经网络可以更好地解决较为复杂的问题。激活函数的缺点是如果模型比较复杂，面对样本数不大的情况时容易出现<a href="http://blog.csdn.net/artprog/article/details/51278643" target="_blank" rel="external"><strong>过拟合</strong></a>。常用的激活函数还有<strong>tanh函数</strong>，<strong>RelU函数</strong>等等。</p><p><strong>sigmoid</strong>函数的数学形式：<br>$$<br>\sigma(x) = \dfrac{1}{1+e^{-x}}<br>$$<br><strong>sigmoid</strong>函数求导：<br>$$<br>\sigma ‘(x)= \dfrac{e^{-x}}{(1+e^{-x})^2}=(1-\sigma)\sigma<br>$$<br><strong>sigmoid</strong>函数和导数python实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">sigmoid</span><span class="params">(x)</span>:</span></div><div class="line">  x = <span class="number">1.</span>/(<span class="number">1</span>+np.exp(-x))</div><div class="line">  <span class="keyword">return</span> x</div><div class="line"><span class="comment"># grad</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">sigmoid_grad</span><span class="params">(f)</span>:</span></div><div class="line">  f = f*(<span class="number">1</span>-f)</div><div class="line">  <span class="keyword">return</span> f</div></pre></td></tr></table></figure><p><strong>softmax</strong>函数的数学形式：<br>$$<br>\text{softmax}(z_i) = \dfrac{e^{z_i}}{\sum_{j=1}^{c} e^{z_j}}      \quad 假设a_i=\text{softmax}(z_i)<br>$$<br><strong>softmax</strong>函数求导：<br>$$<br>\begin{align<em>}<br>\dfrac{\partial a_i}{\partial z_i}&amp;=-\dfrac{e^{z_i}(\sum_{j} e^{z_j})-e^{z_i}e^{z_i}}{(\sum_{j} e^{z_j})^2}\\<br>&amp;=-\dfrac{e^{z_i}}{\sum_{j} e^{z_j}}+(\dfrac{e^{z_i}}{\sum_{j} e^{z_j}})^2\\<br>&amp;= a_i(1-a_i)<br>\end{align</em>}<br>$$<br><strong>softmax函数</strong>的实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> numpy</div><div class="line"><span class="comment"># 输出softmax函数值，输入向量或矩阵x</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">softmax</span><span class="params">(x)</span>:</span></div><div class="line">    <span class="keyword">if</span> len(x.shape)&gt;<span class="number">1</span>:</div><div class="line">        max = np.max(x,axis=<span class="number">1</span>)[:,np.newaxis]</div><div class="line">        x -= max</div><div class="line">        x = np.exp(x)</div><div class="line">        softmax_deno = np.sum(x, axis=<span class="number">1</span>)[:,np.newaxis]</div><div class="line">        x = x/softmax_deno</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        max = np.max(x)</div><div class="line">        x -= max</div><div class="line">        x = np.exp(x)</div><div class="line">        softmax_deno = np.sum(x)</div><div class="line">        x = x/softmax_deno</div><div class="line">    <span class="keyword">return</span> x</div></pre></td></tr></table></figure><p>###　目标函数(Objective fuction)</p><p>目标函数，有时候又称<strong>损失函数（loss function），代价函数（cost function ）</strong>，是网络中的性能参数，也是编译一个模型必须的两个参数之一。在训练模型时，我们的最终目标就是最大化或者最小化目标函数，用$J$表示目标函数。<br>$$<br>\arg\min_{\theta} J<br>$$</p><h4 id="交叉熵-Cross-entropy"><a href="#交叉熵-Cross-entropy" class="headerlink" title="交叉熵(Cross entropy)"></a>交叉熵(Cross entropy)</h4><p>一种常见的目标函数形式：<br>$$<br>J = -\sum_{i}y_i\log{\hat{y}_i}<br>$$<br>其中$i$代表响应的类别，$y_i$是训练样本中的标签，而$\hat{y}_i$模型预测结果。</p><p>一般情况下，我们对$y_i$使用<strong>one-hot</strong>编码，而$\hat{y}$代表了对应类别的概率$p(y_i|w,x)$，因此，$\sum_i\hat{y_i}=1$,在这里我们称$y_i$为预测函数。</p><p>*对$\hat{y}$求导：<br>$$<br>\dfrac{\partial{J}}{\partial{\hat{y}_i}}=-\dfrac{y_i}{\hat{y}_i}<br>$$<br>对向量$\hat{\boldsymbol{y}}=(\hat{y}_1, \dots ,\hat{y}_c)$求导：<br>$$<br>\dfrac{\partial{J}}{\partial\hat{\boldsymbol{y}}}=(-\dfrac{y_1}{\hat{y}_1}, \dots ,-\dfrac{y_c}{\hat{y}_c})<br>$$</p><p>###　预测函数(Predict function)</p><p>对于预测函数$\hat{y}_i$,我们取$\hat{y}_i$最大的$i$作为模型最终预测的类别。使用softmax函数对输出层的输入进行归一化操作，数学表示为：<br>$$<br>\hat{y_i}=p(y_i|w,x)=\dfrac{e^{z_i}}{\sum_{j=1}^{c} e^{z_j}}<br>$$<br>其中$c$表示类别个数，在这里即是输出层的神经元个数。$z_i$为输出层的输入。</p><p>根据softmax函数的求导可知，预测函数$\hat{y}_i$对$z_i$求导：<br>$$<br>\begin{align<em>}<br>\dfrac{\partial \hat{y_i}}{\partial z_i} &amp;= -\hat{y_i}(1-\hat{y_i})\\\dfrac{\partial \hat{y_k}}{\partial z_i} &amp;= -\hat{y_k}\hat{y_i}<br>\end{align</em>}<br>$$<br>根据链式法则，目标函数$J$对$z_i$求导：<br>$$<br>\begin{align<em>}<br>\dfrac{\partial J}{\partial z_i} &amp;=\dfrac{\partial J}{\partial \hat{y_1}} \dfrac{\partial \hat{y_1}}{\partial z_i}+\dots+ \dfrac{\partial J}{\partial \hat{y_c}} \dfrac{\partial \hat{y_c}}{\partial z_i}\\<br>&amp;= y_1\hat{y_i}+\dots+y_i(\hat{y_i}-1)+\dots+y_c\hat{y_i}\\<br>&amp;=\hat{y}_i\sum_{j=1}^cy_c-y_i\\<br>&amp;=\hat{y}_i-y_i<br>\end{align</em>}<br>$$<br>目标函数$J$对向量$z$求导：<br>$$<br>\begin{align<em>}<br>\dfrac{\partial J}{\partial \boldsymbol{z}} = {\boldsymbol{y}}-{\hat{\boldsymbol{y}}}<br>\end{align</em>}<br>$$</p><h3 id="前向传播-Forward-propagation"><a href="#前向传播-Forward-propagation" class="headerlink" title="前向传播(Forward propagation)"></a>前向传播(Forward propagation)</h3><p><strong>前向传播是求目标函数值的过程</strong>，从输入层开始，样本的特征向量$x$遍历模型，到达输出层$\hat{y}$，再将$\hat{y}$和  $y$进行比较，得到目标函数值$J$：<br>$$<br>\begin{align<em>}<br>\boldsymbol{h} &amp;= sigmoid(\boldsymbol{xW}_1+\boldsymbol{b}_1)\\<br>\boldsymbol{\hat{y}} &amp;= sigmoid(\boldsymbol{hW}_2+\boldsymbol{b}_2)\\<br>J &amp;= -\sum_{i}y_i\log{\hat{y}_i}<br>\end{align</em>}<br>$$<br>训练模型的过程就是优化目标函数的过程，我们需要最小化$J=J(\boldsymbol{W}_1,\boldsymbol{b}_1,\boldsymbol{W}_2,\boldsymbol{b_2})$,这歌优化过程我们可以使用<a href="http://www.cnblogs.com/pinard/p/5970503.html" target="_blank" rel="external">梯度下降法</a>,但是由于$J$是一个非凸函数，因此不能使用梯度下降法求得全局最优，也就是不能获得的$J$最小值。</p><h3 id="随机梯度下降-Stochastic-gradient-descent"><a href="#随机梯度下降-Stochastic-gradient-descent" class="headerlink" title="随机梯度下降(Stochastic gradient descent)"></a>随机梯度下降(Stochastic gradient descent)</h3><p>我们可以求目标函数的梯度，它代表目标函数变化增加最快的地方。相反，沿着梯度相反的方向，梯度减少最快，所以我们可以使用迭代的方法更新参数，使得目标函数往着最优的方向进行优化，找到目标函数的最小值：<br>$$<br>\boldsymbol{g}^{(t)} = \dfrac{\partial{J}}{\partial{\boldsymbol{W}^{(t)}}}\\<br>\boldsymbol{W}^{(t+1)} =\boldsymbol{W}^{(t)}+ \alpha\boldsymbol{g}^{(t)}<br>$$<br>$t$表示第$t$次进行迭代更新，$\alpha$表示学习率，代表着每一次迭代要走的步长，$Ｗ$表示我们需要更新的参数，在本例子中，我们需要对$W_1$,$b_2$,$W_2$,$b_2$进行参数更新，每次迭代都需要进行梯度的计算，每次迭代都要计算目标函数的值。</p><p>假设训练样本数量为$N$，如果每次迭代都使用所有的训练样本。这时的目标函数是：<br>$$<br>\mathbb{J}=\mathbb{E}(J)=\dfrac{1}{N}\sum_nJ_n<br>$$<br>当$N$很大的时候，每次迭代都十分耗时，因此收敛的速度会较慢。我们可以使用一种逼近方法，称为<strong>mini-batch</strong>。</p><ul><li><strong>mini-batch</strong>很简单，就是每次迭代更新只使用$k$个训练样本，$k$可以是100这种相对较小的数。</li><li>而<strong>随机梯度下降(SGD)</strong>是每次更新迭代只使用$1$个训练样本，即$k=1$。<strong>SGD</strong>是<strong>mini-batch</strong>的特殊情况，但是我们一般说<strong>SGD</strong>就是指<strong>mini-batch</strong>。</li></ul><h3 id="后向传播-Backward-propagation"><a href="#后向传播-Backward-propagation" class="headerlink" title="后向传播(Backward propagation)"></a>后向传播(Backward propagation)</h3><p><strong>后向传播就是一个求梯度的过程</strong>从输出层开始往输入层传入误差。</p><p>我们将三层全连接神经网络模型的前向传播表示为：<br>$$<br>\begin{align<em>}<br>&amp;\boldsymbol{z}_1 = \boldsymbol{xW_1}+\boldsymbol{b}_1\\<br>&amp;\boldsymbol{h} = {\text sigmoid}(\boldsymbol{z}_1)\\<br>&amp;\boldsymbol{z}_2 = \boldsymbol{xW_2}+\boldsymbol{b}_2\\<br>&amp;\hat{\boldsymbol{y}} = softmax(\boldsymbol{z}_2)\\<br>&amp;J = -\sum_{i}y_i\log{\hat{y}_i}<br>\end{align</em>}<br>$$<br>计算后向传播：<br>$$<br>\begin{align<em>}<br>&amp;\boldsymbol{\delta}_1 = \dfrac{\partial J}{\partial \boldsymbol{z}_2} = \hat{\boldsymbol{y}}-\boldsymbol{y}\\<br>&amp;\boldsymbol{\delta}_2 = \dfrac{\partial J}{\partial \boldsymbol{h}} = \boldsymbol{\delta}_1\dfrac{\partial \boldsymbol{z}_2}{\partial \boldsymbol{h}} =\boldsymbol{\delta}_1\boldsymbol{W}^T_2 \\<br>&amp;\boldsymbol{\delta}_3 = \dfrac{\partial J}{\partial \boldsymbol{z}_1} = \boldsymbol{\delta}_2\dfrac{\partial \boldsymbol{h}}{\partial \boldsymbol{z}_1} =\boldsymbol{\delta}_2</em>\sigma’(\boldsymbol{z}_1) \\<br>&amp;\boldsymbol{\delta}_4 = \dfrac{\partial J}{\partial \boldsymbol{x}} = \boldsymbol{\delta}_3\dfrac{\partial \boldsymbol{z}_1}{\partial \boldsymbol{x}} =\boldsymbol{\delta}_3\boldsymbol{W}^T_1 \\<br>\end{align<em>}<br>$$<br>$\boldsymbol{\delta}_1$就是预测误差，得到上面传播的误差，我们对每一层的参数求梯度：<br>$$<br>\begin{align</em>}<br>\dfrac{\partial J}{\partial \boldsymbol{W}_2}&amp;= \boldsymbol{\delta}_1 \dfrac{\partial\boldsymbol{z}_2 }{\partial \boldsymbol{W}_2} = \boldsymbol{h}^T\boldsymbol{\delta}_1\\<br>\dfrac{\partial J}{\partial \boldsymbol{b}_2} &amp;= \boldsymbol{\delta}_1 \dfrac{\partial\boldsymbol{z}_2 }{\partial \boldsymbol{b}_2} = \boldsymbol{\delta}_1\\<br>\dfrac{\partial J}{\partial \boldsymbol{W}_1} &amp;= \boldsymbol{\delta}_3 \dfrac{\partial\boldsymbol{z}_1 }{\partial \boldsymbol{W}_1} = \boldsymbol{x}^T\boldsymbol{\delta}_3\\<br>\dfrac{\partial J}{\partial \boldsymbol{b}_1} &amp;= \boldsymbol{\delta}_3 \dfrac{\partial\boldsymbol{z}_1 }{\partial \boldsymbol{b}_1} = \boldsymbol{\delta}_3\\<br>\end{align*}<br>$$</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;深度学习应用于自然语言处理-前向神经网络&quot;&gt;&lt;a href=&quot;#深度学习应用于自然语言处理-前向神经网络&quot; class=&quot;headerlink&quot; title=&quot;深度学习应用于自然语言处理-前向神经网络&quot;&gt;&lt;/a&gt;深度学习应用于自然语言处理-前向神经网络&lt;/h2&gt;&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h2 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h2&gt;&lt;p&gt;深度学习的浪潮袭来，现已在各个领域中应用。深度学习的表现令人叹为观止，不得不说我们迎来了依靠深度学习的人工智能学习时代。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;　人工智能，让世界更美好。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这一章主要是通过学习 &lt;a href=&quot;http://cs224d.stanford.edu/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Stanford cs224d&lt;/a&gt; 课程已经阅读一些有些的博客所作出的总结。&lt;/p&gt;
&lt;h2 id=&quot;本章介绍&quot;&gt;&lt;a href=&quot;#本章介绍&quot; class=&quot;headerlink&quot; title=&quot;本章介绍&quot;&gt;&lt;/a&gt;本章介绍&lt;/h2&gt;&lt;p&gt;从数学的角度对前向神经网络数学模型进行介绍、推导和证明。&lt;/p&gt;
&lt;h2 id=&quot;前提知识&quot;&gt;&lt;a href=&quot;#前提知识&quot; class=&quot;headerlink&quot; title=&quot;前提知识&quot;&gt;&lt;/a&gt;前提知识&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://cs229.stanford.edu/section/cs229-linalg.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;线性代数(Linear Algebra)&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://cs229.stanford.edu/section/cs229-prob.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;概率论(Probability Theory)&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://cs229.stanford.edu/section/cs229-cvxopt.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;凸优化(Convex Optimization)&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;前向神经网络&quot;&gt;&lt;a href=&quot;#前向神经网络&quot; class=&quot;headerlink&quot; title=&quot;前向神经网络&quot;&gt;&lt;/a&gt;前向神经网络&lt;/h2&gt;&lt;p&gt;所谓神经网络就是将许多个单一“神经元”联结在一起，这样，一个“神经元”的输出就可以是另一个“神经元”的输入。以下是一个简单的&lt;strong&gt;三层前向全连接神经网络：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://oddpnmpll.bkt.clouddn.com/2016-10-18-14%3A47%3A20.jpg&quot; alt=&quot;neural networks&quot;&gt;&lt;/p&gt;
&lt;p&gt;图中&lt;strong&gt;x&lt;/strong&gt;为输入层，&lt;strong&gt;h&lt;/strong&gt;为隐藏层，$\hat{y}$为输出层。在全连接网络中，上一层和下一层的每个神经元都相连。隐藏层在接收到输入x后会进行一个非线性变化，再将输出信号传递给下一层。非线性变换由激活函数(activation function)实现。在数学上，我们可以用矩阵乘法（Matrix multiplication）来解释:&lt;br&gt;$$&lt;br&gt;\begin{align&lt;em&gt;}&lt;br&gt;\boldsymbol{h} &amp;amp;= \text{sigmoid}(\boldsymbol{xW}_1+\boldsymbol{b}_1)\\&lt;br&gt;\boldsymbol{\hat{y}} &amp;amp;= \text{softmax}(\boldsymbol{hW}_2+\boldsymbol{b}_2)\\&lt;br&gt;\end{align&lt;/em&gt;}&lt;br&gt;$$&lt;/p&gt;
&lt;p&gt;式中&lt;strong&gt;sigmoid&lt;/strong&gt;和&lt;strong&gt;softmax&lt;/strong&gt;都是一个激活函数,&lt;strong&gt;W&lt;/strong&gt;是指两层之间的权重，&lt;strong&gt;b&lt;/strong&gt;是偏置量。我们可以看到&lt;strong&gt;x&lt;/strong&gt;进行了线性变换后，再做非线性变换，&lt;strong&gt;x&lt;/strong&gt;输出的信号将作为&lt;strong&gt;b&lt;/strong&gt;的输入。&lt;/p&gt;
    
    </summary>
    
      <category term="deep NLP" scheme="http://yoursite.com/categories/deep-NLP/"/>
    
    
      <category term="deep NLP" scheme="http://yoursite.com/tags/deep-NLP/"/>
    
      <category term="NLP" scheme="http://yoursite.com/tags/NLP/"/>
    
  </entry>
  
  <entry>
    <title>springMVC</title>
    <link href="http://yoursite.com/2017/11/04/springMVC/"/>
    <id>http://yoursite.com/2017/11/04/springMVC/</id>
    <published>2017-11-04T11:00:32.000Z</published>
    <updated>2017-11-03T12:36:37.183Z</updated>
    
    <content type="html"><![CDATA[<h2 id="springMVC-框架原理"><a href="#springMVC-框架原理" class="headerlink" title="springMVC 框架原理"></a>springMVC 框架原理</h2><p>###前端控制器(DispatcherServlet)</p><p>接受请求，响应结果，相当于转发器，中央处理器。</p><p>有了DispatcherServlet减少了其他组件之间的耦合度。</p><h3 id="处理器映射器-HandlerMapping"><a href="#处理器映射器-HandlerMapping" class="headerlink" title="处理器映射器(HandlerMapping)"></a>处理器映射器(HandlerMapping)</h3><p>根据请求的url查找Handler。</p><h3 id="处理器适配器-HandlerAdapter"><a href="#处理器适配器-HandlerAdapter" class="headerlink" title="处理器适配器(HandlerAdapter)"></a>处理器适配器(HandlerAdapter)</h3><p>按照特定的规则(HandlerAdapter要求的规则)去执行Handler。</p><p>注意：编写Handler需要按照HandlerAdapter的要求去做，这样适配器才能正确的执行Handler。</p><h3 id="视图解析器-View-resolver"><a href="#视图解析器-View-resolver" class="headerlink" title="视图解析器(View resolver)"></a>视图解析器(View resolver)</h3><p>进行视图解析，根据逻辑视图解析成真正的视图（view）</p><p>第一步：发起请求到前端控制器(DispatcherServlet)。</p><p>第二步：前端控制器请求HandlerMapping查找handler(根据xml配置或注解查找)</p><p>第三步：处理器映射器HandlerMapping向前端控制器返回Handler</p><p>第四步：向前端控制器调用处理器适配器执行Handler</p><p>第五步：处理器适配器开始执行Handler</p><p>第六步：Handler执行完给处理器适配器返回Model and View</p><p>第七步：处理器适配器向前端控制器返回Model and View(springMVC框架底层对象)</p><p>第八步：前端控制器请求视图解析器去进行视图解析(根据逻辑视图名解析成真正的视图jsp)</p><p>第九步：视图解析器向前端控制器返回View</p><p>第十步：前端控制器进行视图渲染，视图渲染将模型数据(在Model and View对象中)填充到request域</p><p>第十一步：前端控制器向用户响应结果</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;springMVC-框架原理&quot;&gt;&lt;a href=&quot;#springMVC-框架原理&quot; class=&quot;headerlink&quot; title=&quot;springMVC 框架原理&quot;&gt;&lt;/a&gt;springMVC 框架原理&lt;/h2&gt;&lt;p&gt;###前端控制器(DispatcherSer
      
    
    </summary>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>HTML知识点</title>
    <link href="http://yoursite.com/2017/10/11/html/"/>
    <id>http://yoursite.com/2017/10/11/html/</id>
    <published>2017-10-11T12:30:52.000Z</published>
    <updated>2017-11-02T05:42:20.650Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h1><h2 id="HTML文档结构"><a href="#HTML文档结构" class="headerlink" title="HTML文档结构"></a>HTML文档结构</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">－－&lt;!DOCTYPE&gt; 标签没有结束标签！</div><div class="line">&lt;html lang=<span class="string">"en"</span>&gt;</div><div class="line">&lt;head&gt;（头部部分）</div><div class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</div><div class="line">    &lt;title&gt;显示在浏览器标题栏中的标题&lt;/title&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;（主体部分） </div><div class="line">（页面内容）</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure><p>bgcolor = 背景颜色　background = 背景图片路经</p><h2 id="标题标签"><a href="#标题标签" class="headerlink" title="标题标签"></a>标题标签</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;H1&gt;一级标题&lt;/H1&gt;     &lt;H2&gt; 二级标题&lt;/H2&gt;    &lt;H3&gt;三级标题&lt;/H3&gt;  &lt;H4&gt;四级标题&lt;/H4&gt;     &lt;H5&gt;五级标题&lt;/H5&gt;     &lt;H6&gt;六级标题&lt;/H6&gt;</div></pre></td></tr></table></figure><h2 id="font标签"><a href="#font标签" class="headerlink" title="font标签"></a>font标签</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;font size=<span class="string">"字体大小"</span>  color=<span class="string">"字体颜色"</span> face=<span class="string">"字体类型"</span>&gt;要设置的文字&lt;/font&gt;</div></pre></td></tr></table></figure><h2 id="行控制标签"><a href="#行控制标签" class="headerlink" title="行控制标签"></a>行控制标签</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;p align=<span class="string">"left"</span>/<span class="string">"right"</span>/<span class="string">"center"</span>&gt;&lt;/p&gt;      换行&lt;br /&gt;</div></pre></td></tr></table></figure><h2 id="图片标签"><a href="#图片标签" class="headerlink" title="图片标签"></a>图片标签</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;img src = <span class="string">"图片地址"</span> width = <span class="string">"图片宽度"</span> height = <span class="string">"图片高度"</span> </div><div class="line">alt = <span class="string">"图片的提示文字"</span> align=<span class="string">"top/bottom/middle/left/right"</span> border=<span class="string">"图片的边框宽度"</span>&gt;</div></pre></td></tr></table></figure><h2 id="文字布局"><a href="#文字布局" class="headerlink" title="文字布局"></a>文字布局</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">１）&lt;hr  size=<span class="string">"厚度"</span>  width=<span class="string">"宽度"</span>  color=<span class="string">"颜色"</span>&gt;　　水平线</div><div class="line"></div><div class="line">２）&lt;ol  <span class="built_in">type</span>=序号类型&gt;（序号类型有：1、a、A、ⅰ、I）</div><div class="line"> 　　　　　&lt;li&gt;填写信息&lt;/li&gt;（必须用&lt;li&gt;&lt;/li&gt;将内容包括起来）   </div><div class="line"> 　　　　 ......</div><div class="line">   &lt;/ol&gt;　　　　　　　  有序列表</div><div class="line">   </div><div class="line">３）&lt;ul  <span class="built_in">type</span> = <span class="string">""</span>&gt;(序号类型有：disc(默认值,实心圆点)、circle、square)</div><div class="line">          &lt;li&gt;所写内容&lt;li&gt;</div><div class="line">         .......</div><div class="line">   &lt;/ul&gt;             无序列表</div></pre></td></tr></table></figure><h2 id="页面链接语法"><a href="#页面链接语法" class="headerlink" title="页面链接语法"></a>页面链接语法</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;a href=<span class="string">"链接地址"</span>&gt;连接标志&lt;/a&gt;</div><div class="line">&lt;a href=<span class="string">"mailto: 邮件地址"</span>&gt;站长邮箱&lt;/a&gt;</div></pre></td></tr></table></figure><h2 id="滚动标签"><a href="#滚动标签" class="headerlink" title="滚动标签"></a>滚动标签</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;marquee  </div><div class="line">　　　　　　scrolldelay=滚动延迟时间  </div><div class="line">　　　　　　direction=up/down/left/right(滚动方向) </div><div class="line">　　　　　　onmouseover=“this.stop()”(当鼠标指在上面时停止滚动)  　　</div><div class="line">　　　　　　onmouseout=“this.start()”(当鼠标离开时继续滚动) &gt; </div><div class="line">　　　　　　滚动的文字和图像 </div><div class="line">&lt;/marquee&gt;</div></pre></td></tr></table></figure><h2 id="表格基本框架"><a href="#表格基本框架" class="headerlink" title="表格基本框架"></a>表格基本框架</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;table  </div><div class="line">      border=表格的边框的宽度(一般不超过5) </div><div class="line">      width=表格的宽度  height=表格的高度  </div><div class="line">      bordercolor=表格边框线的颜色  bgcolor=整个表格的背景颜色</div><div class="line">      background=表格的背景图片地址(背景图片) align=表格对齐方式&gt; </div><div class="line">      &lt;tr  bgcolor=行的背景颜色&gt;(行)  </div><div class="line">           &lt;td  </div><div class="line">              colspan=跨的列数  rowspan=跨的行数  bgcolor=本单元格的背景颜色      </div><div class="line">              background=本单元格的背景图片地址(背景图片)  </div><div class="line">              align=单元格中的内容对齐方式(right/left/center/)&gt;</div><div class="line">           &lt;/td&gt;(单元格)  </div><div class="line">      &lt;/tr&gt; </div><div class="line">&lt;/table&gt;</div></pre></td></tr></table></figure><h2 id="表单的基本结构"><a href="#表单的基本结构" class="headerlink" title="表单的基本结构"></a>表单的基本结构</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;form  action=&quot;URL&quot; name=表单名字  method=提交数据的方式（post/get）&gt; 具体的内容 &lt;/form&gt;</div></pre></td></tr></table></figure><h2 id="表单中元素"><a href="#表单中元素" class="headerlink" title="表单中元素"></a>表单中元素</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;input&gt;元素  </div><div class="line"></div><div class="line">　　　 &lt;input  name=“” type=text  size=文本框的大小  maxlenght=限制输入的最大字符&gt;(单行文本框)  </div><div class="line">　　　 &lt;input  name=“” type=password  size=文本框的大小  maxlenght=限制输入的最大字符&gt;(单行文本框——设置密码)  </div><div class="line">　　　 &lt;input  name=“name” type=radio  value=“男”  checked(默认选定)&gt;(单选按钮——男)(设置单选按钮的时候名字一定要一样)  </div><div class="line">　　　 &lt;input  name=“name” type=radio  value=“女”&gt;(单选按钮——女) </div><div class="line">　　　 &lt;input  name=“” type=submit  value=提交&gt;(按钮——提交) </div><div class="line">　　　 &lt;input  name=“” type=reset  value=重置&gt;(按钮——重置)  </div><div class="line">　　　 &lt;input  name=“” type=checkbox  value=play(必须有)  checked&gt;玩游戏(复选框)</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;select&gt;&lt;/select&gt;下拉列表元素 语法：</div><div class="line">　　　&lt;select  name=“”&gt;  </div><div class="line">　　　　　　&lt;option  value=“”(必须有)&gt;内容&lt;/option&gt; </div><div class="line">　　　　　　&lt;option  value=“”(必须有)&gt;内容&lt;/option&gt; </div><div class="line">　　　　　　&lt;option  value=“”(必须有)&gt;内容&lt;/option&gt; </div><div class="line">　　　　　　&lt;option  value=“”(必须有)&gt;内容&lt;/option&gt; </div><div class="line">　　　　　　…… </div><div class="line">　　　&lt;/select&gt;</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;textarea&gt;&lt;/textarea&gt;多行文本框元素  语法：</div><div class="line">　　　&lt;textarea  name=“” cols=“宽度” rows=“高度”(不要和合并单元格的rowspan和colspan相混淆)&gt;  具体的内容  &lt;/textarea&gt;</div></pre></td></tr></table></figure><h2 id="样式类型"><a href="#样式类型" class="headerlink" title="样式类型"></a>样式类型</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">1）标签选择器  语法：  </div><div class="line">   标签&#123;    </div><div class="line">        属性:属性值; </div><div class="line">       &#125;  </div><div class="line">       &lt;style type=”text/css”&gt;  P&#123;font-size:20px;color:blue&#125; &lt;/style&gt;  不需要调用，直接创建标签就能使用   </div><div class="line">2）class选择器  语法：  </div><div class="line">   .类名&#123;   </div><div class="line">        属性:属性值;  </div><div class="line">        &#125;  </div><div class="line">       &lt;style type=”text/css”&gt;  .my&#123;font-size:20px;color:blue&#125; &lt;/style&gt;  调用：在需要使用的地方做为属性来调用（class=类名）</div><div class="line">3）ID选择器 语法： </div><div class="line">   #名称&#123;  </div><div class="line">        属性:属性值; &#125;  </div><div class="line">       &lt;style type=”text/css”&gt;  #my&#123;font-size:20px;color:blue&#125; &lt;/style&gt;  调用：在需要使用的地方做为属性来调用（ID=名称）</div></pre></td></tr></table></figure><h2 id="常用的样式属性"><a href="#常用的样式属性" class="headerlink" title="常用的样式属性"></a>常用的样式属性</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">1)文本属性  </div><div class="line">　　　font-size:字体大小 </div><div class="line">　　　font-family:字体类型  </div><div class="line">　　　font-style:字体样式（斜体） </div><div class="line">　　　color:字体颜色  </div><div class="line">　　　text-algin:文本的对齐方式（left/right/center） </div><div class="line">2)背景属性  </div><div class="line">　　　background-color:背景颜色  </div><div class="line">　　　background-image:url(“图片地址”)背景图片  </div><div class="line">　　　background-repeat:（repeat/no-repeat/repeat-x/repeat-y）背景图片如何被重复显示 </div><div class="line">3)方框属性 </div><div class="line">　　　(1)边界属性 </div><div class="line">　　　 margin-left:设置对象的左边距 </div><div class="line">　　 　margin-right: 设置对象的右边距 </div><div class="line">　　 　margin-top: 设置对象的上边距 </div><div class="line">　　 　margin-bottom: 设置对象的下边距 </div><div class="line">　　 (2)填充属性  </div><div class="line">　　　 padding-left:设置内容与左边框之间的距离 </div><div class="line">　　 　padding-right: 设置内容与右边框之间的距离 </div><div class="line">　　 　padding-top: 设置内容与上边框之间的距离 </div><div class="line">　　 　padding-bottom: 设置内容与下边框之间的距离 </div><div class="line">　　 (3)边框属性 </div><div class="line">　　  　border-style:(soild细边框/dashed/虚边框)边框样式 </div><div class="line">　　 　 border-width:边框宽度 </div><div class="line">　　 　 border-color:边框颜色 </div><div class="line">4)超链接样式 </div><div class="line">　　　 A:link&#123;&#125;未被访问的链接样式 </div><div class="line">　　　 A:visited&#123;&#125;被访问过的链接样式  </div><div class="line">　　　 A:hover&#123;&#125;鼠标悬浮在链接上时的样式  </div><div class="line">　　　 A:active&#123;&#125;鼠标下在按下时链接文字的样式</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;HTML&quot;&gt;&lt;a href=&quot;#HTML&quot; class=&quot;headerlink&quot; title=&quot;HTML&quot;&gt;&lt;/a&gt;HTML&lt;/h1&gt;&lt;h2 id=&quot;HTML文档结构&quot;&gt;&lt;a href=&quot;#HTML文档结构&quot; class=&quot;headerlink&quot; title=&quot;H
      
    
    </summary>
    
      <category term="HTML" scheme="http://yoursite.com/categories/HTML/"/>
    
    
  </entry>
  
  <entry>
    <title>Welcome</title>
    <link href="http://yoursite.com/2017/10/10/hello-world/"/>
    <id>http://yoursite.com/2017/10/10/hello-world/</id>
    <published>2017-10-10T12:55:54.365Z</published>
    <updated>2017-10-10T12:55:54.365Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to sysuNie! It is my first try to share the intereseting things to all of you . If you get any problems while looking my blog,  you can ask me on <a href="https://github.com/sysuNie" target="_blank" rel="external">GitHub</a>.</p><h2 id="Coding-Change-World"><a href="#Coding-Change-World" class="headerlink" title="Coding Change World"></a>Coding Change World</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">import numpy as np</div><div class="line">import matplotlib.pyplot as plt</div><div class="line">x = np.linspace(-8 , 8, 1024)</div><div class="line">y1 = 0.618*np.abs(x) - 0.8* np.sqrt(64-x**2)</div><div class="line">y2 = 0.618*np.abs(x) + 0.8* np.sqrt(64-x**2) </div><div class="line">plt.plot(x, y1, color = <span class="string">'r'</span>)</div><div class="line">plt.plot(x, y2, color = <span class="string">'r'</span>)</div><div class="line">plt.show()</div></pre></td></tr></table></figure><p><img src="/home/miacher/Documents/love.jpg" alt=""> </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to sysuNie! It is my first try to share the intereseting things to all of you . If you get any problems while looking my blog,  y
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hexo-NexT搭建个人博客（一）</title>
    <link href="http://yoursite.com/2016/10/11/hexo-next-one/"/>
    <id>http://yoursite.com/2016/10/11/hexo-next-one/</id>
    <published>2016-10-11T05:25:24.000Z</published>
    <updated>2017-10-11T07:33:50.761Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p><a href="https://hexo.io/zh-cn/" target="_blank" rel="external">Hexo</a> 是一个快速、简洁且高效的静态站点生成框架，它基于 <a href="https://nodejs.org/en/" target="_blank" rel="external">Node.js</a> 。 它有以下特点：</p><ul><li><i class="fa fa-bolt"></i><h6 style="display: inline;">　超快速度</h6><br><i>Node.js 所带来的超快生成速度，让上百个页面在几秒内瞬间完成渲染。</i></li><li><i class="fa fa-pencil"></i><h6 style="display: inline;">　支持Markdown</h6><br><i>Hexo 支持 GitHub Flavored Markdown 的所有功能，甚至可以整合 Octopress 的大多数插件。</i></li><li><i class="fa fa-cloud-upload"></i><h6 style="display: inline;">　一键部署</h6><br><i>只需一条指令即可部署到Github Pages，或其他网站</i></li><li><i class="fa fa-cog"></i><h6 style="display: inline;">　丰富的插件</h6><br><i>Hexo 拥有强大的插件系统，安装插件可以让 Hexo 支持 Jade, CoffeeScript。</i></li></ul><p>通过 Hexo 你可以轻松地使用 Markdown 编写文章，除了 Markdown 本身的语法之外，还可以使用 Hexo 提供的 <a href="https://hexo.io/zh-cn/docs/tag-plugins.html" target="_blank" rel="external">标签插件</a> 来快速的插入特定形式的内容。</p><p>基于 Hexo 这个优秀的博客框架，很多优秀的开发者奉献出了它们基于 Hexo 开发的<a href="https://hexo.io/themes/" target="_blank" rel="external">主题</a>。<br><a href="http://theme-next.iissnan.com/" target="_blank" rel="external">NexT</a> 因其 <span id="yu-1">精于心，简于形</span> 的风格，一直被广大用户所喜爱。</p><a id="more"></a><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>安装 Hexo 只需几分钟时间，若你在安装过程中遇到问题或无法找到解决方式，请<a href="https://neveryu.github.io/guestbook/" target="_blank" rel="external">提交问题</a>，我会尽力解决你的问题。</p><h2 id="安装前提"><a href="#安装前提" class="headerlink" title="安装前提"></a>安装前提</h2><p>安装 Hexo 相当简单。然而在安装前，您必须检查电脑中是否已安装下列应用程序:</p><blockquote><p><a href="https://nodejs.org/en/" target="_blank" rel="external">Node.js</a><br><a href="http://git-scm.com/" target="_blank" rel="external">Git</a></p></blockquote><p>如果您的电脑中已经安装上述必备程序，那么恭喜你！接下来只需要使用 npm 即可完成 Hexo 的安装。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install -g hexo-cli</div></pre></td></tr></table></figure></p><p>如果你的电脑中尚未安装所需要的程序，请根据以下安装指示完成安装。</p><h2 id="安装-Git"><a href="#安装-Git" class="headerlink" title="安装 Git"></a>安装 Git</h2><ul><li>Windows：下载安装 git 。<a id="download" href="https://git-scm.com/download/win" target="_blank" rel="external"><i class="fa fa-download"></i><span> Download Now</span><br></a></li><li>Mac：使用 <a href="http://mxcl.github.com/homebrew/" target="_blank" rel="external">Homebrew</a>，<a href="http://www.macports.org/" target="_blank" rel="external">MacPorts</a> 或下载 <a href="http://sourceforge.net/projects/git-osx-installer/" target="_blank" rel="external">安装程序</a> 安装</li><li>Linux（Ubuntu，Debian）：<code>sudo apt-get install git-core</code></li><li>Linux（Fedora，Red Hat，CentOS）：<code>sudo yum install git-core</code></li></ul><h2 id="安装-Node-js"><a href="#安装-Node-js" class="headerlink" title="安装 Node.js"></a>安装 Node.js</h2><p>安装 Node.js 的最佳方式是使用 <a href="https://github.com/creationix/nvm" target="_blank" rel="external">nvm</a>。（nvm：Node Version Manager）<br>windows 下使用 nvm 请看这里： <a href="https://github.com/coreybutler/nvm-windows" target="_blank" rel="external">nvm-windows</a> ，首先需要下载安装 nvm 。<a id="download" href="https://github.com/coreybutler/nvm-windows/releases" target="_blank" rel="external"><i class="fa fa-download"></i><span> Download Now</span><br></a><br>windows下安装完nvm以后，我们可以打开命令行中执行命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ nvm</div><div class="line">$ nvm install latest</div></pre></td></tr></table></figure></p><p>执行完以后，重启命令行，执行命令 <code>node -v</code> ，如果出现版本号，那么 <code>Node.js</code> 就安装成功了。</p><p id="div-border-left-red">如果没有安装成功，那可能就是墙的原因。建议下载 <code>Node.js</code> 直接安装。<a id="download" href="https://nodejs.org/en/download/" target="_blank" rel="external"><i class="fa fa-download"></i><span> Download Now</span><br></a> </p><h2 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h2><p>有了 Node.js ，我们可以使用 npm 安装 Hexo。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install -g hexo-cli</div></pre></td></tr></table></figure></p><p>安装 Hexo 完成后，我们首先需要为我们的项目创建一个<span id="inline-green">指定文件夹</span>（例如我在 D 盘目录下创建了一个文件夹 blog 。<code>D:\blog</code> ），在指定文件夹中执行下列命令， Hexo 将会在指定文件夹中新建所需要的文件。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo init</div></pre></td></tr></table></figure></p><p>等待安装，安装完成后，<span id="inline-green">指定文件夹</span> 的目录如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">.</div><div class="line">├── _config.yml</div><div class="line">├── package.json</div><div class="line">├── scaffolds</div><div class="line">├── source</div><div class="line">|   ├── _drafts</div><div class="line">|   └── _posts</div><div class="line">└──</div></pre></td></tr></table></figure></p><p>我们继续执行命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ hexo g</div><div class="line">$ hexo s --debug</div></pre></td></tr></table></figure></p><p>Hexo 将 source 文件夹中除 _posts 文件夹之外，开头命名为 _(下划线)的文件 / 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 public 文件夹，而其他文件夹会被拷贝过去。<br>这个时候，我们在浏览器中访问 <a href="http://localhost:4000/" target="_blank" rel="external">http://localhost:4000/</a> ，就可以看到基于 Hexo 的默认主题的原型：<br><img src="http://p1.bqimg.com/567571/27324b740c9e91e2.png" alt="hexo-next-one-1"></p><h2 id="安装-NexT-主题"><a href="#安装-NexT-主题" class="headerlink" title="安装 NexT 主题"></a>安装 NexT 主题</h2><h3 id="下载-NexT-主题"><a href="#下载-NexT-主题" class="headerlink" title="下载 NexT 主题"></a>下载 NexT 主题</h3><p>依旧是在当前目录下，使用 Git checkout 代码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git <span class="built_in">clone</span> https://github.com/iissnan/hexo-theme-next themes/next</div></pre></td></tr></table></figure></p><p>等待下载完成。</p><p id="div-border-left-yellow">在 Hexo 中有两份主要的配置文件，其名称都是 _config.yml 。其中，一份位于站点根目录下，主要包含 Hexo 本身的配置；另一份位于主题目录下，这份配置由主题作者提供，主要用于配置主题相关的选项。<br>  我们约定，将前者称为 <span id="inline-blue">站点配置文件</span>，后者称为 <span id="inline-purple">主题配置文件</span></p><h3 id="启用-NexT-主题"><a href="#启用-NexT-主题" class="headerlink" title="启用 NexT 主题"></a>启用 NexT 主题</h3><p>打开 <span id="inline-blue">站点配置文件</span> ，找到 theme 字段，并将其值更改为 next 。<br>到此， NexT 主题安装完成。下一步我们将验证主题是否正确启用。在切换主题之后、验证之前，我们最好使用 <code>hexo clean</code> 来清除 Hexo 的缓存。</p><h3 id="验证主题"><a href="#验证主题" class="headerlink" title="验证主题"></a>验证主题</h3><p>首先启动 Hexo 本地站点，并开启调试模式（即加上 <code>--debug</code>），整个命令是 <code>hexo s --debug</code>。在服务启动的过程，注意观察命令行输出是否有任何异常信息。当命令行输出中提示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">INFO  Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop.</div></pre></td></tr></table></figure><p>此时即可使用浏览器访问 <a href="http://localhost:4000/" target="_blank" rel="external">http://localhost:4000/</a> ，检查站点是否正确运行。</p><p id="div-border-left-green">当你看到站点的外观与下图所示类似时即说明你已成功安装 NexT 主题。这是 NexT 默认的 Scheme —— Muse</p><br><img src="http://p1.bqimg.com/567571/8333728b5eaab526.png" alt="hexo-next-one-1"><br>现在，我们已经成功安装并启用了 NexT 主题。<br><br><p id="div-border-top-blue">关于更多基本操作和基础知识，请查阅 <a href="https://hexo.io/zh-cn/" target="_blank" rel="external">Hexo</a> 与 <a href="http://theme-next.iissnan.com/" target="_blank" rel="external">NexT</a> 官方文档.</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="本地调试步骤"><a href="#本地调试步骤" class="headerlink" title="本地调试步骤"></a>本地调试步骤</h2><p>三部曲：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ hexo clean</div><div class="line">$ hexo g</div><div class="line">$ hexo s --debug</div></pre></td></tr></table></figure></p><p>这种带 debug 的运行，如果出现错误，可以在命令行中看到错误提示信息。</p><h2 id="部署步骤"><a href="#部署步骤" class="headerlink" title="部署步骤"></a>部署步骤</h2><p>三部曲：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ hexo clean</div><div class="line">$ hexo g</div><div class="line">$ hexo d</div></pre></td></tr></table></figure></p><p>当然在部署之前，需要先配置好配置文件中的 deploy。</p><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"postName"</span>  <span class="comment">#新建文章</span></div><div class="line">$ hexo new page <span class="string">"pageName"</span> <span class="comment"># 新建页面</span></div><div class="line">$ hexo generate <span class="comment"># 生成静态页面至public目录</span></div><div class="line">$ hexo server <span class="comment"># 开启预览访问端口(默认端口4000，'ctrl+c'关闭server)</span></div><div class="line">$ hexo deploy <span class="comment"># 项目部署</span></div><div class="line">$ hexo <span class="built_in">help</span> <span class="comment"># 查看帮助</span></div><div class="line">$ hexo version <span class="comment"># 查看Hexo的版本</span></div></pre></td></tr></table></figure><h2 id="简写命令"><a href="#简写命令" class="headerlink" title="简写命令"></a>简写命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ hexo new == hexo n</div><div class="line">$ hexo generate == hexo g</div><div class="line">$ hexo server == hexo s</div><div class="line">$ hexo deploy == hexo d</div></pre></td></tr></table></figure><h2 id="常见问题1"><a href="#常见问题1" class="headerlink" title="常见问题1"></a>常见问题1</h2><p>在 hexo 的配置和设置文件中，在冒号后面没留空格会导致出问题：<br>错误的设置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">author:Neveryu</div><div class="line">email:react.dong.yu@gmail.com</div><div class="line">language:zh-CN</div></pre></td></tr></table></figure></p><p>正确的设置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">author: Neveryu</div><div class="line">email: react.dong.yu@gmail.com</div><div class="line">language: zh-CN</div></pre></td></tr></table></figure></p><h2 id="常见问题2"><a href="#常见问题2" class="headerlink" title="常见问题2"></a>常见问题2</h2><p>关于 Git 提交中用户名和 Email 的设置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git config --global user.name &quot;Your name&quot;</div><div class="line">git config --global user.email &quot;Your email&quot;</div></pre></td></tr></table></figure></p><h2 id="常见问题3"><a href="#常见问题3" class="headerlink" title="常见问题3"></a>常见问题3</h2><p>Hexo 中的图标使用的是 <a href="http://fontawesome.io/" target="_blank" rel="external">Font Awesome</a> ，所以，我们的博客已经自带了 Font Awesome 中的所有图标，基本可以满足我们的所有需求，我们可以去 Font Awesome 中查找我们想要使用的图标。<br><i class="fa fa-github"></i> <code>&lt;i class=&quot;fa fa-github&quot;&gt;&lt;/i&gt;</code><br><i class="fa fa-github fa-lg"></i> <code>&lt;i class=&quot;fa fa-github fa-lg&quot;&gt;&lt;/i&gt;</code><br><i class="fa fa-github fa-2x"></i> <code>&lt;i class=&quot;fa fa-github fa-2x&quot;&gt;&lt;/i&gt;</code></p><p></p><h5 style="color:#f63;"><i>最后要说的是：</i></h5><p></p><p id="div-border-top-green"><i><a href="https://github.com/Neveryu/Neveryu.github.io" target="_blank" rel="external">博客源码</a> ， 欢迎 star<br></i></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://hexo.io/zh-cn/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt; 是一个快速、简洁且高效的静态站点生成框架，它基于 &lt;a href=&quot;https://nodejs.org/en/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Node.js&lt;/a&gt; 。 它有以下特点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;i class=&quot;fa fa-bolt&quot;&gt;&lt;/i&gt;&lt;h6 style=&quot;display: inline;&quot;&gt;　超快速度&lt;/h6&gt;&lt;br&gt;&lt;i&gt;Node.js 所带来的超快生成速度，让上百个页面在几秒内瞬间完成渲染。&lt;/i&gt;&lt;/li&gt;
&lt;li&gt;&lt;i class=&quot;fa fa-pencil&quot;&gt;&lt;/i&gt;&lt;h6 style=&quot;display: inline;&quot;&gt;　支持Markdown&lt;/h6&gt;&lt;br&gt;&lt;i&gt;Hexo 支持 GitHub Flavored Markdown 的所有功能，甚至可以整合 Octopress 的大多数插件。&lt;/i&gt;&lt;/li&gt;
&lt;li&gt;&lt;i class=&quot;fa fa-cloud-upload&quot;&gt;&lt;/i&gt;&lt;h6 style=&quot;display: inline;&quot;&gt;　一键部署&lt;/h6&gt;&lt;br&gt;&lt;i&gt;只需一条指令即可部署到Github Pages，或其他网站&lt;/i&gt;&lt;/li&gt;
&lt;li&gt;&lt;i class=&quot;fa fa-cog&quot;&gt;&lt;/i&gt;&lt;h6 style=&quot;display: inline;&quot;&gt;　丰富的插件&lt;/h6&gt;&lt;br&gt;&lt;i&gt;Hexo 拥有强大的插件系统，安装插件可以让 Hexo 支持 Jade, CoffeeScript。&lt;/i&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通过 Hexo 你可以轻松地使用 Markdown 编写文章，除了 Markdown 本身的语法之外，还可以使用 Hexo 提供的 &lt;a href=&quot;https://hexo.io/zh-cn/docs/tag-plugins.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;标签插件&lt;/a&gt; 来快速的插入特定形式的内容。&lt;/p&gt;
&lt;p&gt;基于 Hexo 这个优秀的博客框架，很多优秀的开发者奉献出了它们基于 Hexo 开发的&lt;a href=&quot;https://hexo.io/themes/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;主题&lt;/a&gt;。&lt;br&gt;&lt;a href=&quot;http://theme-next.iissnan.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;NexT&lt;/a&gt; 因其 &lt;span id=&quot;yu-1&quot;&gt;精于心，简于形&lt;/span&gt; 的风格，一直被广大用户所喜爱。&lt;/p&gt;
    
    </summary>
    
      <category term="Hexo" scheme="http://yoursite.com/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
      <category term="Next" scheme="http://yoursite.com/tags/Next/"/>
    
  </entry>
  
</feed>
